# Copyright (C) 2014-2025 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
#
# This file is part of ledger.
#
# ledger is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ledger is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar. If not, see <http://www.gnu.org/licenses/>
#
# Generated by Django 4.1.3 on 2022-11-30 13:37

from datetime import timedelta
from django.db import migrations, models
import django.db.models.deletion


def infer_related_entries(apps, schema_editor):
    Entry = apps.get_model("ledger", "Entry")

    entry_pks = set()
    for entry in Entry.objects.filter(category__accounts__isnull=False).filter(
        related__isnull=True
    ):
        if entry.pk in entry_pks:
            continue
        elif entry.related is not None:
            continue
        elif (
            Entry.objects.filter(account=entry.account)
            .filter(date=entry.date)
            .filter(category=entry.category)
            .count()
            > 1
        ):
            continue
        others = (
            Entry.objects.filter(account__category=entry.category)
            .filter(amount=entry.amount * -1.0)
            .filter(date=entry.date)
            .filter(category=entry.account.category)
            .filter(related__isnull=True)
            .exclude(pk__in=list(entry_pks) + [entry.pk])
        )
        if others.count() == 1 and entry.related is None and others[0].related is None:
            other_entry = others[0]

            entry.related = other_entry
            entry.save()
            entry_pks.add(entry.pk)

            other_entry.related = entry
            other_entry.save()
            entry_pks.add(other_entry.pk)

    d3 = timedelta(days=3)
    for entry in Entry.objects.filter(category__accounts__isnull=False).filter(
        related__isnull=True
    ):
        if entry.pk in entry_pks:
            continue
        elif entry.related is not None:
            continue
        elif (
            Entry.objects.filter(account=entry.account)
            .filter(date=entry.date)
            .filter(category=entry.category)
            .count()
            > 1
        ):
            continue
        others = (
            Entry.objects.filter(account__category=entry.category)
            .filter(amount=entry.amount * -1.0)
            .filter(date__range=[entry.date - d3, entry.date + d3])
            .filter(category=entry.account.category)
            .filter(related__isnull=True)
            .exclude(pk__in=list(entry_pks) + [entry.pk])
        )
        if others.count() == 1 and entry.related is None and others[0].related is None:
            other_entry = others[0]

            entry.related = other_entry
            entry.save()
            entry_pks.add(entry.pk)

            other_entry.related = entry
            other_entry.save()
            entry_pks.add(other_entry.pk)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("ledger", "0006_budget"),
    ]

    operations = [
        migrations.AddField(
            model_name="entry",
            name="related",
            field=models.OneToOneField(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ledger.entry",
                verbose_name="Related entry",
            ),
        ),
        migrations.RunPython(infer_related_entries),
    ]
